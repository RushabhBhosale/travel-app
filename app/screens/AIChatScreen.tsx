import {
  ActivityIndicator,
  Alert,
  KeyboardAvoidingView,
  Platform,
  ScrollView,
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  View,
} from "react-native";
import React, { useState } from "react";
import { RouteProp, useNavigation, useRoute } from "@react-navigation/native";
import { useUser } from "@clerk/clerk-expo";
import { HomeStackParams } from "../navigation/HomeStack";
import { SafeAreaView } from "react-native-safe-area-context";
import { Ionicons } from "@expo/vector-icons";
import axios from "axios";

const suggestions = [
  "Best Places to eat in",
  "3 Day itinerary to",
  "Top Attractions",
];

const AIChatScreen = () => {
  const navigation = useNavigation();
  const route = useRoute<RouteProp<HomeStackParams, "AIChat">>();
  const { location } = route?.params;
  const { user } = useUser();
  const [messages, setMessages] = useState<
    { from: "user" | "ai"; text: string }[]
  >([]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);

  const sendMail = async (message: string) => {
    const email = user?.primaryEmailAddress?.emailAddress;
    if (!email) {
      Alert.alert(
        "Error",
        "User email not found. Please ensure you are logged in."
      );
    }

    Alert.alert(
      "Send to Email",
      `Do you want to send this response to ${email}`,
      [
        { text: "Cancel", style: "cancel" },
        {
          text: "Send",
          onPress: async () => {
            try {
              const response = await axios.post(
                "http://192.168.0.101:3000/api/send-email",
                {
                  email,
                  subject: `Travel assistant Response from ${location}`,
                  message,
                }
              );
              Alert.alert("Success", response.data.message);
            } catch (error: any) {
              console.log("Error sending mail", error);
              Alert.alert(
                "Error",
                error.response?.data?.message || "Failed to send email"
              );
            }
          },
        },
      ]
    );
  };

  const askAI = async (query: string) => {
    setMessages((prev) => [...prev, { from: "user", text: query }]);
    setInput("");
    setLoading(true);

    try {
      const response = await fetch(
        "https://openrouter.ai/api/v1/chat/completions",
        {
          method: "POST",
          headers: {
            Authorization: `Bearer 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`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            model: "mistralai/mistral-7b-instruct:free",
            messages: [{ role: "user", content: query }],
          }),
        }
      );

      const data = await response.json();
      const reply = data?.choices?.[0]?.message?.content;
      console.log("chds", reply, data);

      setMessages((prev) => [...prev, { from: "ai", text: reply }]);
    } catch (error) {
      console.log("Error", error);
      setMessages((prev) => [
        ...prev,
        { from: "ai", text: "Sorry i could'nt fetch a response" },
      ]);
    } finally {
      setLoading(false);
    }
  };
  return (
    <View className="flex-1 bg-white pt-14 px-4">
      <View className="flex-row items-center mb-4">
        <TouchableOpacity onPress={() => navigation.goBack()}>
          <Ionicons name="arrow-back" color={"#000"} size={24} />
        </TouchableOpacity>
        <Text className="ml-4 text-lg font-semibold">Ai Assistant</Text>
      </View>

      <View className="bg-orange-100 p-3 rounded-md mb-2">
        <Text className="text-sm text-orange-600 font-medium">
          4 message left. <Text className="underline">Get more</Text>
        </Text>
      </View>

      <View className="bg-blue-50 p-3 rounded-md mb-4 mt-2">
        <Text className="text-sm font-medium text-orange-600">
          The Ai assistant is purely information it doesn not have edit access
          to your trip plan
        </Text>
        <Text className="text-sm text-blue-600 mt-1">
          Information generated by ai assistant may not be fully accurate
        </Text>
      </View>

      <View className="mb-4">
        <Text className="font-semibold mb-1">
          Dont know what to ask try these examples
        </Text>
        <View className="flex-row flex-wrap gap-2">
          {suggestions.map((q, idx) => (
            <TouchableOpacity
              key={idx}
              onPress={() => askAI(`${q} ${location}`)}
              className="bg-gray-100 px-4 py-2 rounded-full mb-1"
            >
              <Text className="text-sm text-gray-800">
                {q} {location}
              </Text>
            </TouchableOpacity>
          ))}
        </View>
      </View>

      <ScrollView>
        {messages.map((msg, idx) => (
          <View key={idx} className="mb-3">
            <View
              className={`p-3 rounded-lg ${
                msg.from == "user"
                  ? "bg-gray-100 self-end"
                  : "bg-orange-50 self-start"
              }`}
            >
              <Text className="text-sm">{msg.text}</Text>
            </View>

            {msg.from == "ai" && (
              <TouchableOpacity onPress={() => sendMail(msg.text)}>
                <Ionicons name="mail" size={20} color={"#007AFF"} />
              </TouchableOpacity>
            )}
          </View>
        ))}
        {loading && (
          <View className="bg-orange-50 self-start p-3 rounded-lg mb-3">
            <ActivityIndicator size="small" color="orange" />
          </View>
        )}
      </ScrollView>
      <KeyboardAvoidingView
        keyboardVerticalOffset={80}
        behavior={Platform.OS == "ios" ? "padding" : undefined}
      >
        <View className="flex-row items-center border-[0.2px] rounded-full px-4 py-2 mb-4 bg-gray-50">
          <TextInput
            placeholder="Ask any travel related questions"
            className="flex-1 text-sm"
            value={input}
            onChangeText={setInput}
          />
          <TouchableOpacity
            onPress={() => askAI(input)}
            disabled={!input.trim()}
          >
            <Ionicons name="arrow-forward" size={24} color={"black"} />
          </TouchableOpacity>
        </View>
      </KeyboardAvoidingView>
    </View>
  );
};

export default AIChatScreen;

const styles = StyleSheet.create({});
